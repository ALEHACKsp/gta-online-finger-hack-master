{"version":3,"sources":["components/stage/style.module.scss","components/option/style.module.scss","components/finger/style.module.scss","components/finger/Finger.js","components/option/Option.js","components/stage/Stage.js","containers/Stage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Finger","image","className","styles","container","src","alt","Option","selected","onClick","option","showResult","cx","success","correct","failed","img","Stage","time","fingerImage","options","selectedOptions","started","showResults","onOptionClick","onResetClick","onCheckClick","parsedTime","moment","format","forceLength","trim","map","key","includes","buttons","button","data-disabled","length","rightColumn","props","selectOptions","bind","check","reset","start","state","finger","min","max","Math","ceil","floor","random","this","setState","clearInterval","timer","prevFinger","config","fingers","getRandomIntInclusive","sort","setInterval","newSelectedOptions","filter","opt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3cfa93f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__384bU\",\"options\":\"style_options__1yuqg\",\"button\":\"style_button__19l5K\",\"time\":\"style_time__1Y6uz\",\"rightColumn\":\"style_rightColumn__1nq27\",\"buttons\":\"style_buttons__1ivBe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"option\":\"style_option__3jlmk\",\"selected\":\"style_selected__2sz5w\",\"success\":\"style_success__3KbkC\",\"failed\":\"style_failed__3AUgm\",\"img\":\"style_img__c0Qrd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__14au6\"};","import React from 'react';\r\nimport styles from './style.module.scss'\r\n\r\nconst Finger = ({ image }) => {\r\n\r\n    return(<div className={styles.container}>\r\n        <img src={image} alt=\"\"/>\r\n    </div>)\r\n};\r\n\r\nexport default Finger;","import React from 'react';\r\nimport styles from './style.module.scss'\r\nimport cx from 'classnames'\r\n\r\nconst Option = ({ selected = false, onClick, option, showResult = false }) => {\r\n\r\n    const className = cx(styles.option, {\r\n        [styles.selected]: selected,\r\n        [styles.success]: showResult && option.correct,\r\n        [styles.failed]: showResult && selected && !option.correct,\r\n    });\r\n\r\n    return(<div\r\n        className={className}\r\n        onClick={() => onClick(option)}\r\n    >\r\n        <img src={option.img} alt=\"\" className={styles.img}/>\r\n    </div>)\r\n};\r\n\r\nexport default Option;","import React from 'react';\r\nimport styles from './style.module.scss'\r\n\r\nimport * as moment from 'moment';\r\nimport 'moment-duration-format';\r\n\r\nimport Finger from \"../finger/Finger\";\r\nimport Option from \"../option/Option\";\r\nconst Stage = ({time, fingerImage, options, selectedOptions, started, showResults, onOptionClick, onResetClick, onCheckClick }) => {\r\n\r\n    const parsedTime = moment.duration(time, \"seconds\").format(\"mm:ss\", {\r\n        forceLength: true,\r\n        trim: false,\r\n    });\r\n\r\n\r\n    return(<div className={styles.container}>\r\n\r\n        <div>\r\n            <div className={styles.options}>\r\n                {!!options && options.map((option, key) =>  <Option\r\n                    key={key}\r\n                    option={option}\r\n                    selected={selectedOptions.includes(option)}\r\n                    onClick={onOptionClick}\r\n                    showResult={showResults}\r\n                />)}\r\n            </div>\r\n\r\n            <div className={styles.buttons}>\r\n                <div className={styles.button} onClick={onCheckClick} data-disabled={selectedOptions.length !== 4}>CHECK</div>\r\n                <div className={styles.button} onClick={onResetClick}>{started ? \"RESET\" : \"START\"}</div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n        <div className={styles.rightColumn}>\r\n            <div className={styles.time}>{parsedTime}</div>\r\n            <Finger image={fingerImage}/>\r\n        </div>\r\n\r\n\r\n\r\n    </div>)\r\n};\r\n\r\nexport default Stage;","import React from 'react'\r\nimport StageComponent from \"../components/stage/Stage\";\r\nimport config from './../config'\r\nclass Stage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.selectOptions = this.selectOptions.bind(this);\r\n        this.check = this.check.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.start = this.start.bind(this);\r\n\r\n        this.state = {\r\n            finger: null,\r\n            options: [],\r\n            selectedOptions: [],\r\n            showResults: true,\r\n            time: 0,\r\n            started: false,\r\n        }\r\n    }\r\n\r\n    getRandomIntInclusive(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.reset();\r\n    }\r\n\r\n    check() {\r\n        this.setState({\r\n            showResults: true,\r\n        })\r\n\r\n        clearInterval(this.timer)\r\n    }\r\n\r\n    start() {\r\n        this.setState({\r\n            started: true\r\n        }, this.reset)\r\n    }\r\n\r\n    reset() {\r\n        const { started, finger : prevFinger } = this.state;\r\n\r\n        let finger = null;\r\n\r\n        while (!finger || finger.image === prevFinger.image) {\r\n            finger = config.fingers[this.getRandomIntInclusive(0, config.fingers.length - 1)];\r\n            if (!prevFinger) break;\r\n        }\r\n\r\n        finger.options.sort(function() {\r\n            return .5 - Math.random();\r\n        });\r\n\r\n        this.setState({\r\n            finger,\r\n            showResults: false,\r\n            selectedOptions: [],\r\n            time: 0,\r\n        });\r\n\r\n\r\n        clearInterval(this.timer)\r\n        if (started) {\r\n            this.timer = setInterval(() => {\r\n                this.setState({\r\n                    time: this.state.time + 1,\r\n                })\r\n            }, 1000)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    selectOptions(option) {\r\n\r\n        const { selectedOptions} = this.state;\r\n        let newSelectedOptions = [];\r\n\r\n        if (this.state.selectedOptions.includes(option)) {\r\n            newSelectedOptions = selectedOptions.filter(opt => opt.img !== option.img)\r\n\r\n        } else {\r\n\r\n            if (selectedOptions.length > 3) return;\r\n\r\n            newSelectedOptions = [\r\n                ...selectedOptions,\r\n                option\r\n            ]\r\n        }\r\n\r\n        this.setState({\r\n            selectedOptions: newSelectedOptions,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {finger, selectedOptions, showResults, started, time} = this.state;\r\n\r\n        return (\r\n            <StageComponent\r\n                fingerImage={finger ? finger.image : null}\r\n                options={finger ? finger.options : null}\r\n                selectedOptions={selectedOptions}\r\n                onOptionClick={this.selectOptions}\r\n                onResetClick={started ? this.reset : this.start}\r\n                onCheckClick={this.check}\r\n                started={started}\r\n                showResults={showResults}\r\n                time={time}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stage;","import React from 'react';\r\nimport Stage from \"./containers/Stage\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n      <Stage />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}